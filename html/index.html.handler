#!/bin/bash
source "html/functions.bash"
page="$(cat - )"; method="$1"; url="$2"; args="$3"; logfile="$4.log"
TMPFILE="/tmp/.sample-multi-shotifier"
#[[ ! -f $TMPFILE.rootdir ]] && echo "/tmp" > $TMPFILE.rootdir

# declare variables, and initialize them with a default, or a GET webargument (if received from form)
initArg "$args" "action"        ""
initArg "$args" "rootdirectory" "$([[ -f $TMPFILE.rootdir ]] && cat $TMPFILE.rootdir || echo '/tmp')"
initArg "$args" "directory"     ""
initArg "$args" "outfile"       "/tmp/multishot.wav"
initArg "$args" "nfiles"        16
initArg "$args" "nstartfile"    0
initArg "$args" "pitchup"       "1.0"
initArg "$args" "sampleframes"  999999
initArg "$args" "sampletrim"    "00:00.00 =00:00.20"
initArg "$args" "normalize"     "checked='checked'"
initArg "$args" "recursive"     "checked='checked'"
initArg "$args" "mono"          "checked='checked'"
initArg "$args" "soxextra"      "sox %s %s contrast 75"

# other functions

getdirs(){
  cache="$( [[ -f $TMPFILE.rootdir ]] && cat $TMPFILE.rootdir )"
  if [[ "$1" == "$cache" ]] && [[ -f "$TMPFILE.diroptions" ]]; then
    cat $TMPFILE.diroptions | sed "s|>$2|selected=selected >$2|g"
    return 0;
  fi
  find -L "$1" -type d -maxdepth 2 -not -path '*/\.*' 2>&1 | while read line; do 
    [[ "$2" == "$line" ]] && selected="selected=selected" || selected=""; 
    printf "<option $selected value=\"$line\">$line</option>"; 
  done | tee $TMPFILE.diroptions
}

runsox(){
  files=0; dir="$1"; outfile="$2"; nfiles="$3"; nstartfile="$4"; pitchup="$5"; 
  normalize="$6"; maxlength="$7"; trim="$8"; recursive="$9"; mono="$10"; soxextra="${11}"
  [[ ${#normalize} != 0 ]] && normalize="--norm"
  [[ ${#mono} != 0 ]] && mono="-c 1"
  echo "./runsox $dir $outfile $nfiles $nstartfile $pitchup $normalize $maxlength $trim $recursive $mono $soxextra"
  normalize="$6"; maxlength="$7"; files=0; [[ ${#normalize} != 0 ]] && normalize="--norm"
  echo "$dir" | grep "\*\." &>/dev/null && dir="$(dirname "$dir")";
  cd "$dir"; echo "cd'ing to $(pwd)"; offset=0
  [[ ${#recursive} != 0 ]] && listcmd="find -L . -name '*wav' -not -path '*/\.*'" || listcmd="ls *.wav"
  [[ -f "$outfile" ]] && rm "$outfile"
  sox -n -e signed -b 16 -r 44100 -c 2 /tmp/silence.wav trim ${trim} # create silence file to enable exact padding
  eval "$listcmd" | tail -n+$nstartfile | while read wavfile; do
    wavfile="$(echo "$wavfile" | sed 's/\.\///g')"
    echo "checking $wavfile ($samples samples < $maxlength, files/nfiles: $files/$nfiles)"
    samples="$(soxi "$wavfile" | grep Duration | cut -d' ' -f11 )"
    if [[ ${#samples} > 0 ]] && 
       (( "$samples" < "$maxlength" )) && (( $files < $nfiles )); then
      echo "processing ($files) $wavfile"; name="$(basename "$wavfile" | sed 's/WAV/wav/g')"
      sox "$wavfile" $normalize -c 2 -e signed -b 16 -r 44100 "/tmp/$name.trimmed.wav" trim ${trim}
      sox -m /tmp/silence.wav "/tmp/$name.trimmed.wav" "/tmp/$name.wav"; rm "/tmp/$name.trimmed.wav" # pad wav
      ((files=files+1))
    fi
    if (( $files >= $nfiles )); then break; fi 
  done
  cd /tmp
  if ls *.wav.wav &>/dev/null; then 
    sox *.wav.wav $mono $outfile speed "$pitchup" 
    extra="$( printf "$soxextra" "$outfile" "$outfile.wav")"; echo "$extra";
    ${extra}; mv "$outfile.wav" "$outfile"
    rm silence.wav *.wav.wav
    echo "written $outfile ($(stat -c%s "$outfile") bytes)"
  else echo "no wavfiles found to glue to output file"; fi
}

# lets handle!
selecteddir="${args["directory"]}"
args["directory"]="$(getdirs "${args["rootdirectory"]}" "$selecteddir")" # generate selectbox options
echo "${args["rootdirectory"]}" > $TMPFILE.rootdir                   # cache rootdir for convenience

case "${args["action"]}" in


  play)
                echo "playing "${args["outfile"]}""
                which aplay && (aplay "${args["outfile"]}" &>/dev/null &) || echo "aplay is not installed..cannot play"
                echo "$page" 
                ;;

  write)        
                echo "$selecteddir" > $TMPFILE.selecteddir
                output="$(runsox "$selecteddir" \
                                 "${args["outfile"]}" \
                                 "${args["nfiles"]}" \
                                 "${args["nstartfile"]}" \
                                 "${args["pitchup"]}" \
                                 "${args["normalize"]}" \
                                 "${args["sampleframes"]}" \
                                 "${args["sampletrim"]}" \
                                 "${args["recursive"]}" \
                                 "${args["mono"]}" \
                                 "${args["soxextra"]}" \
                                 2>&1 | tee -a "$logfile")"
                echo "$page" | replace '<!--output-->' "<div class='unit span-grid console'><pre>$output</pre></div>"
                ;;

  *)            echo "$page" | grep -v playfile
                ;;

esac | templatify
